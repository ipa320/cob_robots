<?xml version="1.0"?>
<launch>
	<arg name="robot"/>
	<arg name="driver_yaml"/>
        <arg name="canopen_driver_yaml"/>
	<arg name="controller_yaml"/>

	<arg name="can_device" default="can0"/>
	<arg name="pkg_hardware_config" default="$(find cob_hardware_config)"/>
	<arg name="sim" default="false"/>
	<arg name="reset_errors_before_recover" default="false"/>
	<arg name="enable_stuck_detector" default="true"/>

	<arg name="component_name" value="base"/>
	<arg name="interval_ms" value="20"/>
	<arg name="use_external_sync" value="false"/>
	<arg name="start_external_sync" value="false"/>

	<arg name="stuck_detector_timeout" default="2.0"/>
	<arg name="stuck_detector_threshold" default="0.174533"/>
	<arg name="stuck_detector_shutdown" default="false"/>
    <arg name="base_controllers_to_spawn" default="joint_state_controller odometry_controller"/>

    <arg name="velocity_smoother_config_file"   default="$(arg pkg_hardware_config)/robots/$(arg robot)/config/velocity_smoother.yaml"/>
    <arg name="twist_mux_config_locks"          default="$(arg pkg_hardware_config)/robots/$(arg robot)/config/twist_mux_locks.yaml"/>
    <arg name="twist_mux_config_topics"         default="$(arg pkg_hardware_config)/robots/$(arg robot)/config/twist_mux_topics.yaml"/>

	<rosparam unless="$(arg sim)" ns="$(arg component_name)/driver" command="load" file="$(arg driver_yaml)"/>
	<include unless="$(arg sim)" file="$(find cob_bringup)/drivers/canopen_402.launch">
		<arg name="robot" value="$(arg robot)"/>
		<arg name="component_name" value="$(arg component_name)"/>
		<arg name="can_device" value="$(arg can_device)"/>
		<arg name="interval_ms" value="$(arg interval_ms)"/>
		<arg name="use_external_sync" value="$(arg use_external_sync)"/>
		<arg name="start_external_sync" value="$(arg start_external_sync)"/>
		<arg name="reset_errors_before_recover" value="$(arg reset_errors_before_recover)"/>
		<arg name="canopen_driver_yaml" value="$(arg canopen_driver_yaml)"/>
	</include>

	<group if="$(arg enable_stuck_detector)">
		<include unless="$(arg sim)" file="$(find cob_base_controller_utils)/launch/stuck_detector.launch">
			<arg name="timeout" value="$(arg stuck_detector_timeout)"/>
			<arg name="threshold" value="$(arg stuck_detector_threshold)"/>
			<arg name="shutdown" value="$(arg stuck_detector_shutdown)"/>
		</include>
	</group>
	<node if="$(arg sim)" ns="$(arg component_name)" pkg="cob_helper_tools" type="fake_driver.py" name="fake_driver" cwd="node" respawn="false" output="screen"/>

	<group ns="base">
		<rosparam command="load" file="$(arg controller_yaml)"/>
		<node pkg="controller_manager" type="controller_manager" name="base_controller_spawner" args="spawn $(arg base_controllers_to_spawn)" respawn="false" output="screen"/>
	</group>

	<group ns="$(arg component_name)">
		<!-- twist mux -->
		<include file="$(find cob_bringup)/tools/twist_mux.launch">
			<arg name="robot" value="$(arg robot)"/>
			<arg name="config_locks"  default="$(arg twist_mux_config_locks)"/>
                        <arg name="config_topics" default="$(arg twist_mux_config_topics)"/>
			<arg name="cmd_vel_out" default="velocity_smoother/command"/>
			<arg name="marker_out" default="twist_mux/marker"/>
		</include>

		<!-- velocity smoother -->
		<include file="$(find cob_bringup)/tools/velocity_smoother.launch">
			<arg name="robot" value="$(arg robot)"/>
			<arg name="config_file"           default="$(arg velocity_smoother_config_file)"/>
			<arg name="raw_cmd_vel_topic"     default="velocity_smoother/command"/>
			<arg name="smooth_cmd_vel_topic"  default="twist_controller/command"/>
			<arg name="robot_cmd_vel_topic"   default="twist_controller/command"/>
			<arg name="odom_topic"            default="odometry_controller/odometry"/>
		</include>
	</group>
</launch>
