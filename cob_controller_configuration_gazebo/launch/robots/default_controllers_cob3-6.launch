<?xml version="1.0"?>
<launch>

	<arg name="robot" default="cob3-6"/>

	<!-- aggregated robot_state_publisher -->
	<include file="$(find cob_bringup)/tools/robot_state_publisher.launch">
		<arg name="robot" value="$(arg robot)" />
	</include>

	<!-- Base -->
	<!-- simulated driver services -->
	<node ns="base" pkg="cob_controller_configuration_gazebo" type="gazebo_services.py" name="gazebo_services" cwd="node" respawn="false" output="screen" />
	<!-- base controllers -->
	<include file="$(find cob_bringup)/controllers/base_controller_plugin.launch">
		<arg name="robot" value="$(arg robot)"/>
	</include>
	<!-- scanner and scanner-filter -->
	<include file="$(find cob_bringup)/drivers/laser_scan_filter.launch">
		<arg name="robot" value="$(arg robot)"/>
		<arg name="name" value="base_laser_front"/>
	</include>
	<include file="$(find cob_bringup)/drivers/laser_scan_filter.launch">
		<arg name="robot" value="$(arg robot)"/>
		<arg name="name" value="base_laser_rear"/>
	</include>
	<include file="$(find cob_bringup)/drivers/laser_scan_filter.launch">
		<arg name="robot" value="$(arg robot)"/>
		<arg name="name" value="base_laser_top"/>
	</include>
	<include file="$(find cob_bringup)/drivers/scan_unifier.launch" >
		<arg name="robot" value="$(arg robot)" />
	</include>


	<!-- Head -->
	<!-- simulated driver services -->
	<node ns="head" pkg="cob_controller_configuration_gazebo" type="gazebo_services.py" name="gazebo_services" cwd="node" respawn="false" output="screen" />
	<!-- generic controllers -->
	<include file="$(find cob_bringup)/controllers/generic_controller.launch">
		<arg name="robot" value="$(arg robot)"/>
		<arg name="component_name" value="head"/>
	</include>

	<!-- Arm -->
	<!-- simulated driver services -->
	<node ns="arm" pkg="cob_controller_configuration_gazebo" type="gazebo_services.py" name="gazebo_services" cwd="node" respawn="false" output="screen" />
	<!-- generic controllers -->
	<include file="$(find cob_bringup)/controllers/generic_controller.launch">
		<arg name="robot" value="$(arg robot)"/>
		<arg name="component_name" value="arm"/>
	</include>

	<!-- Gripper -->
	<!-- simulated driver services -->
	<node ns="gripper" pkg="cob_controller_configuration_gazebo" type="gazebo_services.py" name="gazebo_services" cwd="node" respawn="false" output="screen" />
	<!-- generic controllers -->
	<include file="$(find cob_bringup)/controllers/generic_controller.launch">
		<arg name="robot" value="$(arg robot)"/>
		<arg name="component_name" value="gripper"/>
	</include>

	<!-- Torso -->
	<!-- simulated driver services -->
	<node ns="torso" pkg="cob_controller_configuration_gazebo" type="gazebo_services.py" name="gazebo_services" cwd="node" respawn="false" output="screen" />
	<!-- generic controllers -->
	<include file="$(find cob_bringup)/controllers/generic_controller.launch">
		<arg name="robot" value="$(arg robot)"/>
		<arg name="component_name" value="torso"/>
	</include>

	<!-- Tray -->
	<!-- simulated driver services -->
	<node ns="tray" pkg="cob_controller_configuration_gazebo" type="gazebo_services.py" name="gazebo_services" cwd="node" respawn="false" output="screen" />
	<!-- generic controllers -->
	<include file="$(find cob_bringup)/controllers/generic_controller.launch">
		<arg name="robot" value="$(arg robot)"/>
		<arg name="component_name" value="tray"/>
	</include>

	<!-- Tray sensors -->
	<node ns="tray_sensors" pkg="cob_phidgets" type="simulated_range_sensors.py" name="tray_sensors" output="screen">
		<rosparam command="load" file="$(find cob_hardware_config)/$(arg robot)/config/tray_sensors_sim.yaml"/>
	</node>

	<!-- start additional components -->
	<include file="$(find cob_bringup)/drivers/sound.launch" >
		<arg name="robot" value="$(arg robot)"/>
	</include>
	<include file="$(find cob_bringup)/drivers/light.launch" >
		<arg name="robot" value="$(arg robot)"/>
		<arg name="component_name" value="light"/>
		<arg name="sim_enabled" value="true"/>
	</include>
	<include file="$(find cob_bringup)/tools/base_collision_observer.launch" >
		<arg name="robot" value="$(arg robot)"/>
	</include>
	<include file="$(find cob_bringup)/drivers/battery_voltage_filter.launch" >
		<arg name="robot" value="$(arg robot)"/>
	</include>
	<include file="$(find cob_bringup)/tools/diagnostics_aggregator.launch" >
		<arg name="robot" value="$(arg robot)"/>
	</include>

	<node name="cam3d_relay" pkg="topic_tools" type="relay" args="/cam3d/rgb/image_raw /cam3d/rgb/image_color" respawn="false" output="screen"/>
	<node name="cam3d_relay_depth_image" pkg="topic_tools" type="relay" args="/cam3d/depth/image_raw /cam3d/depth/image" respawn="false" output="screen"/>
	<node name="cam3d_relay_depth_points" pkg="topic_tools" type="relay" args="/cam3d/depth_registered/points /cam3d/depth/points" respawn="false" output="screen"/>
	<node name="cam3d_relay_depth_camera_info" pkg="topic_tools" type="relay" args="/cam3d/depth_registered/camera_info /cam3d/depth/camera_info" respawn="false" output="screen"/>

	<include file="$(find cob_cam3d_throttle)/launch/cam3d_throttle.launch" >
		<arg name="namespace" value="/cam3d" />
		<arg name="rate" value="1.0" />
		<arg name="start_manager" value="true"/>
		<arg name="nodelet_manager" value="cam3d_nodelet_manager"/>
	</include>

	<!-- fake components for simulation -->
	<include file="$(find cob_bringup)/drivers/relayboard.launch">
		<arg name="sim" value="true"/>
	</include>

</launch>
