<?xml version="1.0"?>
<launch>

	<arg name="robot" default="cob3-9"/>

	<!-- aggregated robot_state_publisher -->
	<include file="$(find cob_bringup)/tools/robot_state_publisher.launch">
		<arg name="robot" value="$(arg robot)" />
	</include>

	<!-- Base -->
	<!-- simulated driver services -->
	<node ns="base" pkg="cob_controller_configuration_gazebo" type="gazebo_services.py" name="gazebo_services" cwd="node" respawn="false" output="screen" />
	<!-- base controllers -->
	<include file="$(find cob_bringup)/controllers/base_controller_plugin.launch">
		<arg name="robot" value="$(arg robot)"/>
	</include>
	<!-- scanner and scanner-filter -->
	<include file="$(find cob_bringup)/drivers/laser_scan_filter.launch">
		<arg name="robot" value="$(arg robot)"/>
		<arg name="name" value="front"/>
	</include>
	<include file="$(find cob_bringup)/drivers/laser_scan_filter.launch">
		<arg name="robot" value="$(arg robot)"/>
		<arg name="name" value="rear"/>
	</include>
	<include file="$(find cob_bringup)/drivers/laser_scan_filter.launch">
		<arg name="robot" value="$(arg robot)"/>
		<arg name="name" value="top"/>
	</include>

	<!-- Head -->
	<!-- simulated driver services -->
	<node ns="head" pkg="cob_controller_configuration_gazebo" type="gazebo_services.py" name="gazebo_services" cwd="node" respawn="false" output="screen" />
	<!-- generic controllers -->
	<include file="$(find cob_bringup)/controllers/generic_controller.launch">
		<arg name="robot" value="$(arg robot)"/>
		<arg name="component_name" value="head"/>
	</include>

	<!-- Arm -->
	<!-- simulated driver services -->
	<node ns="arm" pkg="cob_controller_configuration_gazebo" type="gazebo_services.py" name="gazebo_services" cwd="node" respawn="false" output="screen" />
	<!-- generic controllers -->
	<include file="$(find cob_bringup)/controllers/generic_controller.launch">
		<arg name="robot" value="$(arg robot)"/>
		<arg name="component_name" value="arm"/>
	</include>

	<!-- Gripper -->
	<!-- simulated driver services -->
	<node ns="gripper" pkg="cob_controller_configuration_gazebo" type="gazebo_services.py" name="gazebo_services" cwd="node" respawn="false" output="screen" />
	<!-- generic controllers -->
	<include file="$(find cob_bringup)/controllers/generic_controller.launch">
		<arg name="robot" value="$(arg robot)"/>
		<arg name="component_name" value="gripper"/>
	</include>

	<!-- Torso -->
	<!-- simulated driver services -->
	<node ns="torso" pkg="cob_controller_configuration_gazebo" type="gazebo_services.py" name="gazebo_services" cwd="node" respawn="false" output="screen" />
	<!-- generic controllers -->
	<include file="$(find cob_bringup)/controllers/generic_controller.launch">
		<arg name="robot" value="$(arg robot)"/>
		<arg name="component_name" value="torso"/>
	</include>

	<!-- Tray -->
	<!-- simulated driver services -->
	<node ns="tray" pkg="cob_controller_configuration_gazebo" type="gazebo_services.py" name="gazebo_services" cwd="node" respawn="false" output="screen" />
	<!-- generic controllers -->
	<include file="$(find cob_bringup)/controllers/generic_controller.launch">
		<arg name="robot" value="$(arg robot)"/>
		<arg name="component_name" value="tray"/>
	</include>

	<!-- Tray sensors -->
	<node ns="tray_sensors" pkg="cob_phidgets" type="simulated_range_sensors.py" name="tray_sensors" output="screen">
		<rosparam command="load" file="$(find cob_hardware_config)/$(arg robot)/config/tray_sensors_sim.yaml"/>
	</node>

	<!-- start additional components -->
	<include file="$(find cob_bringup)/drivers/sound.launch" />
	<include file="$(find cob_bringup)/drivers/light.launch" >
		<arg name="robot" value="$(arg robot)"/>
		<arg name="component_name" value="light"/>
		<arg name="sim_enabled" value="true"/>
	</include>
	<include file="$(find cob_bringup)/tools/base_collision_observer.launch" >
		<arg name="robot" value="$(arg robot)"/>
	</include>
	<include file="$(find cob_bringup)/drivers/battery_voltage_filter.launch" >
		<arg name="robot" value="$(arg robot)"/>
	</include>
	<include file="$(find cob_bringup)/tools/diagnostics_aggregator.launch" >
		<arg name="robot" value="$(arg robot)"/>
	</include>

	<node name="cam3d_relay_rgb_image_color" pkg="topic_tools" type="relay" args="/cam3d/rgb/image_raw /cam3d/rgb/image_color" respawn="false" output="screen"/>
	<node name="cam3d_relay_depth_image" pkg="topic_tools" type="relay" args="/cam3d/depth/image_raw /cam3d/depth/image" respawn="false" output="screen"/>
	<node name="cam3d_relay_depth_points" pkg="topic_tools" type="relay" args="/cam3d/depth_registered/points /cam3d/depth/points" respawn="false" output="screen"/>
	<node name="cam3d_relay_depth_camera_info" pkg="topic_tools" type="relay" args="/cam3d/depth_registered/camera_info /cam3d/depth/camera_info" respawn="false" output="screen"/>

	<include file="$(find cob_cam3d_throttle)/launch/cam3d_throttle.launch" >
		<arg name="namespace" value="/cam3d" />
		<arg name="rate" value="1.0" />
		<arg name="start_manager" value="true"/>
		<arg name="nodelet_manager" value="cam3d_nodelet_manager"/>
	</include>

	<!-- fake components for simulation -->
	<include file="$(find cob_bringup)/drivers/relayboard.launch">
		<arg name="sim" value="true"/>
	</include>

	<node pkg="cob_controller_configuration_gazebo" type="gazebo_topics.py" name="gazebo_topics" cwd="node" respawn="false" output="screen" />

	<node pkg="cob_controller_configuration_gazebo" type="fake_diagnostics.py" name="$(anon fake_diagnostics-1)" cwd="node" respawn="false" output="screen" >
		<param name="diagnostics_name" value="laser_front"/>
		<param name="topic_name" value="laser_front/scan_filtered"/>
	</node>
	<node pkg="cob_controller_configuration_gazebo" type="fake_diagnostics.py" name="$(anon fake_diagnostics-2)" cwd="node" respawn="false" output="screen" >
		<param name="diagnostics_name" value="laser_rear"/>
		<param name="topic_name" value="laser_rear/scan_filtered"/>
	</node>
	<node pkg="cob_controller_configuration_gazebo" type="fake_diagnostics.py" name="$(anon fake_diagnostics-3)" cwd="node" respawn="false" output="screen" >
		<param name="diagnostics_name" value="laser_top"/>
		<param name="topic_name" value="laser_top/scan_filtered"/>
	</node>
	<node pkg="cob_controller_configuration_gazebo" type="fake_diagnostics.py" name="$(anon fake_diagnostics-4)" cwd="node" respawn="false" output="screen" >
		<param name="diagnostics_name" value="/stereo/left/color_camera"/>
		<param name="topic_name" value="stereo/left/image_raw"/>
	</node>
	<node pkg="cob_controller_configuration_gazebo" type="fake_diagnostics.py" name="$(anon fake_diagnostics-5)" cwd="node" respawn="false" output="screen" >
		<param name="diagnostics_name" value="/stereo/right/color_camera"/>
		<param name="topic_name" value="stereo/right/image_raw"/>
	</node>
	<node pkg="cob_controller_configuration_gazebo" type="fake_diagnostics.py" name="$(anon fake_diagnostics-6)" cwd="node" respawn="false" output="screen" >
		<param name="diagnostics_name" value="joy"/>
		<param name="topic_name" value="joy_usage"/>
	</node>
	<node pkg="cob_controller_configuration_gazebo" type="fake_diagnostics.py" name="$(anon fake_diagnostics-7)" cwd="node" respawn="false" output="screen" >
		<param name="diagnostics_name" value="pc1 CPU Usage"/>
		<param name="topic_name" value="pc1_usage"/>
	</node>
	<node pkg="cob_controller_configuration_gazebo" type="fake_diagnostics.py" name="$(anon fake_diagnostics-8)" cwd="node" respawn="false" output="screen" >
		<param name="diagnostics_name" value="pc2 CPU Usage"/>
		<param name="topic_name" value="pc2_usage"/>
	</node>
	<node pkg="cob_controller_configuration_gazebo" type="fake_diagnostics.py" name="$(anon fake_diagnostics-9)" cwd="node" respawn="false" output="screen" >
		<param name="diagnostics_name" value="pc3 CPU Usage"/>
		<param name="topic_name" value="pc3_usage"/>
	</node>
	<node pkg="cob_controller_configuration_gazebo" type="fake_diagnostics.py" name="$(anon fake_diagnostics-10)" cwd="node" respawn="false" output="screen" >
		<param name="diagnostics_name" value="Wifi Status (ddwrt)"/>
		<param name="topic_name" value="wifi_status"/>
	</node>
	<node pkg="cob_controller_configuration_gazebo" type="fake_diagnostics.py" name="$(anon fake_diagnostics-11)" cwd="node" respawn="false" output="screen" >
		<param name="diagnostics_name" value="base_controller"/>
		<param name="topic_name" value="base/joint_states"/>
	</node>
	<node pkg="cob_controller_configuration_gazebo" type="fake_diagnostics.py" name="$(anon fake_diagnostics-12)" cwd="node" respawn="false" output="screen" >
		<param name="diagnostics_name" value="torso_controller"/>
		<param name="topic_name" value="torso/joint_states"/>
	</node>
	<node pkg="cob_controller_configuration_gazebo" type="fake_diagnostics.py" name="$(anon fake_diagnostics-13)" cwd="node" respawn="false" output="screen" >
		<param name="diagnostics_name" value="tray_controller"/>
		<param name="topic_name" value="tray/joint_states"/>
	</node>
	<node pkg="cob_controller_configuration_gazebo" type="fake_diagnostics.py" name="$(anon fake_diagnostics-14)" cwd="node" respawn="false" output="screen" >
		<param name="diagnostics_name" value="head_controller"/>
		<param name="topic_name" value="head/joint_states"/>
	</node>
	<node pkg="cob_controller_configuration_gazebo" type="fake_diagnostics.py" name="$(anon fake_diagnostics-15)" cwd="node" respawn="false" output="screen" >
		<param name="diagnostics_name" value="arm_controller"/>
		<param name="topic_name" value="arm/joint_states"/>
	</node>
	<node pkg="cob_controller_configuration_gazebo" type="fake_diagnostics.py" name="$(anon fake_diagnostics-16)" cwd="node" respawn="false" output="screen" >
		<param name="diagnostics_name" value="gripper_controller"/>
		<param name="topic_name" value="gripper/joint_states"/>
	</node>

</launch>
