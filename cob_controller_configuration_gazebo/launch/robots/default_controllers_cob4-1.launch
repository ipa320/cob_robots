<?xml version="1.0"?>
<launch>

	<arg name="robot" default="cob4-1"/>

	<!-- aggregated robot_state_publisher -->
<!--
	<include file="$(find cob_bringup)/tools/robot_state_publisher.launch">
		<arg name="robot" value="$(arg robot)" />
	</include>
-->

	<!-- Base -->
	<!-- simulated driver services -->
	<node ns="base" pkg="cob_controller_configuration_gazebo" type="gazebo_services.py" name="gazebo_services" cwd="node" respawn="false" output="screen" />
	<!-- base controllers -->
<!--
	<include file="$(find cob_bringup)/controllers/base_controller_plugin.launch">
		<arg name="robot" value="$(arg robot)"/>
	</include>
-->
	<!-- scanner and scanner-filter -->
	<include file="$(find cob_bringup)/drivers/laser_scan_filter.launch"><!-- hidden in driver.launch -->
		<arg name="robot" value="$(arg robot)"/>
		<arg name="name" value="base_laser_front"/>
	</include>
	<include file="$(find cob_bringup)/drivers/laser_scan_filter.launch"><!-- hidden in driver.launch -->
		<arg name="robot" value="$(arg robot)"/>
		<arg name="name" value="base_laser_left"/>
	</include>
	<include file="$(find cob_bringup)/drivers/laser_scan_filter.launch"><!-- hidden in driver.launch -->
		<arg name="robot" value="$(arg robot)"/>
		<arg name="name" value="base_laser_right"/>
	</include>
<!--
	<include file="$(find cob_bringup)/drivers/scan_unifier.launch" >
		<arg name="robot" value="$(arg robot)" />
	</include>
-->

	<include file="$(find cob_bringup)/drivers/relayboard.launch"><!-- simulation option -->
		<arg name="sim" value="true"/>
	</include>

<!--
	<node pkg="rostopic" type="rostopic" args="pub /safety_controller/state_is_valid std_msgs/Bool 'data: true' -r10" name="fake_collission_monitor" output="screen"/>
-->

	<!-- Torso -->
	<!-- simulated driver services -->
	<node ns="torso" pkg="cob_controller_configuration_gazebo" type="gazebo_services.py" name="gazebo_services" cwd="node" respawn="false" output="screen" />
	<!-- generic controllers -->
<!--
	<include file="$(find cob_bringup)/controllers/generic_controller.launch">
		<arg name="robot" value="$(arg robot)"/>
		<arg name="component_name" value="torso"/>
	</include>
-->
	<!-- Cartesian controllers -->
<!--
	<include file="$(find cob_bringup)/controllers/generic_cartesian_controller.launch">
		<arg name="robot" value="$(arg robot)"/>
		<arg name="component_name" value="torso"/>
	</include>
-->

	<!-- Head --> <!--  not yet in hardware -->
	<!-- simulated driver services -->
	<!--node ns="head" pkg="cob_controller_configuration_gazebo" type="gazebo_services.py" name="gazebo_services" cwd="node" respawn="false" output="screen" /-->
<!--
	<include file="$(find cob_bringup)/controllers/generic_controller.launch">
		<arg name="robot" value="$(arg robot)"/>
		<arg name="component_name" value="head"/>
	</include>

	<include file="$(find cob_bringup)/controllers/generic_cartesian_controller.launch">
		<arg name="robot" value="$(arg robot)"/>
		<arg name="component_name" value="head"/>
	</include>
-->

	<!-- Sensorring --> <!--  not yet in hardware -->
	<!-- simulated driver services -->
	<!--node ns="sensorring" pkg="cob_controller_configuration_gazebo" type="gazebo_services.py" name="gazebo_services" cwd="node" respawn="false" output="screen" /-->
<!--
	<include file="$(find cob_bringup)/controllers/generic_controller.launch">
		<arg name="robot" value="$(arg robot)"/>
		<arg name="component_name" value="sensorring"/>
	</include>
-->

	<!-- camera nodelets -->
<!--
	<include file="$(find cob_bringup)/drivers/image_flip.launch">
		<arg name="robot" value="$(arg robot)"/>
		<arg name="camera_name" value="torso_cam3d_left"/>
	</include>

	<include file="$(find cob_bringup)/drivers/image_flip.launch">
		<arg name="robot" value="$(arg robot)"/>
		<arg name="camera_name" value="torso_cam3d_right"/>
	</include>

	<include file="$(find cob_bringup)/drivers/image_flip.launch">
		<arg name="robot" value="$(arg robot)" />
		<arg name="camera_name" value="sensorring_cam3d"/>
	</include>

	<include file="$(find cob_bringup)/drivers/image_flip.launch">
		<arg name="robot" value="$(arg robot)"/>
		<arg name="camera_name" value="head_cam"/>
		<arg name="colorimage_in" value="/head_cam/image_rect_color"/>
		<arg name="colorimage_out" value="/head_cam_upright/image_raw"/>
	</include>
-->
	<node name="image_proc" pkg="image_proc" type="image_proc" ns="head_cam"/>

	<!-- start additional components -->
<!--
	<include file="$(find cob_bringup)/drivers/sound.launch" >
		<arg name="robot" value="$(arg robot)"/>
	</include>
	<include file="$(find cob_bringup)/tools/base_collision_observer.launch" >
		<arg name="robot" value="$(arg robot)"/>
	</include>
	<include file="$(find cob_bringup)/tools/diagnostics_aggregator.launch" >
		<arg name="robot" value="$(arg robot)"/>
	</include>

	<include file="$(find cob_bringup)/tools/behavior.launch" >
		<arg name="robot" value="$(arg robot)" />
	</include>

	<include file="$(find cob_script_server)/launch/script_server.launch" />
-->
	
	<node name="fake_monitor" pkg="cob_controller_configuration_gazebo" type="fake_monitoring.py" args="--diag-hostnames='light, safety, base_laser_front, base_laser_right, base_laser_left, -b1, -t1, -t2, -t3, -s1, -h32, torso_cam3d_right, torso_cam3d_left, head_cam, sensorring_cam3d, torso/driver, torso_cam3d_down, base/driver, joystick'"/>



	<!-- start sim-independent nodes, i.e. mid/top-level -->
	<include file="$(find cob_bringup)/robots/cob4-1.xml" />

</launch>
